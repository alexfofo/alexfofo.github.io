{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WORDS","LETTERS","App","props","word","generateWTF","state","wordToFind","display","repeat","length","countDown","max","Math","floor","random","this","getRandomInt","index","result","displayAsTab","split","letter","regex","RegExp","match","setState","exec","join","won","indexOf","loss","className","role","aria-label","map","onClick","handleLetterClick","key","open","modal","closeOnDocumentClick","type","handleRetry","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAIMA,EAAQ,CAAC,SAAU,UAAW,WAAY,UAAW,SAAU,QAAS,SAAU,SAAU,aAAc,QAAS,cACnHC,EAAU,6BA4EDC,E,YAvEb,WAAaC,GAAQ,IAAD,sBAElB,IAAMC,GADN,4CAAMD,KACYE,cAFA,OAGlB,EAAKC,MAAQ,CAAEC,WAAYH,EAAMI,QAAS,IAAIC,OAAOL,EAAKM,QAASC,UAAW,GAH5D,E,0EAMPC,GACX,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,M,oCAI7C,OAAOZ,EAAMgB,KAAKC,aAAajB,EAAMU,W,wCAGrBQ,GAAQ,IAKpBC,EALmB,EACWH,KAAKV,MAA/BC,EADe,EACfA,WAAYI,EADG,EACHA,UAChBS,EAAeJ,KAAKV,MAAME,QAAQa,MAAM,IACtCC,EAASrB,EAAQiB,GACjBK,EAAQ,IAAIC,OAAOF,EAAQ,MAMjC,IAHKf,EAAWkB,MAAMF,IACpBP,KAAKU,SAAS,CAAEf,UAAWA,EAAY,IAEhCQ,EAASI,EAAMI,KAAKpB,IACzBa,EAAaD,EAAOD,OAASI,EAEjCN,KAAKU,SAAS,CAAElB,QAASY,EAAaQ,KAAK,Q,oCAI3C,IAAMxB,EAAOY,KAAKX,cAClBW,KAAKU,SAAS,CAAEnB,WAAYH,EAAMI,QAAS,IAAIC,OAAOL,EAAKM,QAASC,UAAW,M,+BAGvE,IAAD,SACwBK,KAAKV,MAA5BE,EADD,EACCA,QAASG,EADV,EACUA,UACXkB,GAAgC,IAA1BrB,EAAQsB,QAAQ,KACtBC,EAAOpB,GAAa,EAE1B,OACE,yBAAKqB,UAAU,OACb,0BAAMC,KAAK,MAAMC,aAAW,UAAUF,UAAU,UAAhD,gBACA,uDAA8BrB,GAC9B,uBAAGqB,UAAU,eAAgBxB,GAC7B,yBAAKwB,UAAU,YACd/B,EAAQoB,MAAM,IAAIc,KAAI,SAACb,EAAQJ,GAAT,OACnB,0BAAMc,UAAU,UAAUI,QAAS,WAAO,EAAKC,kBAAkBnB,IAASoB,IAAKpB,GAASI,OAG5F,6BACA,kBAAC,IAAD,CAAOiB,KAAMV,EAAKW,OAAK,EAACC,sBAAsB,GAC5C,yBAAKT,UAAU,SACb,wEACA,4BAAQU,KAAK,SAASN,QAAS,kBAAM,EAAKO,gBAA1C,cAIJ,kBAAC,IAAD,CAAOJ,KAAMR,EAAMS,OAAK,EAACC,sBAAsB,GAC7C,yBAAKT,UAAU,SACb,+CACA,4BAAQU,KAAK,SAASN,QAAS,kBAAM,EAAKO,gBAA1C,oBAA0E,6BAA1E,gC,GA/DMC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvB,MACvB,2DCZNwB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c6e758e0.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport Popup from \"reactjs-popup\"\n\nconst WORDS = ['poulpe', 'dauphin', 'lanterne', 'oreille', 'oiseau', 'livre', 'iphone', 'orange', 'entreprise', 'japon', 'universite']\nconst LETTERS = \"abcdefghijklmnopqrstuvwxyz\"\nconst BNN = \"BNN\"\n\nclass App extends Component {\n\n  constructor (props) {\n    super(props)\n    const word = this.generateWTF()\n    this.state = { wordToFind: word, display: \"_\".repeat(word.length), countDown: 8 }\n  }\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  generateWTF() {\n    return WORDS[this.getRandomInt(WORDS.length)]\n  }\n\n  handleLetterClick(index) {\n    const { wordToFind, countDown } = this.state\n    var displayAsTab = this.state.display.split('')\n    const letter = LETTERS[index]\n    const regex = new RegExp(letter, 'gi')\n    var result\n\n    if (!wordToFind.match(regex)) {\n      this.setState({ countDown: countDown - 1 })\n    }\n    while ( (result = regex.exec(wordToFind)) ) {\n        displayAsTab[result.index] = letter\n    }\n    this.setState({ display: displayAsTab.join('') })\n  }\n\n  handleRetry() {\n    const word = this.generateWTF()\n    this.setState({ wordToFind: word, display: \"_\".repeat(word.length), countDown: 8 })\n  }\n\n  render() {\n    const { display, countDown } = this.state\n    const won = display.indexOf('_') === -1\n    const loss = countDown <= 0\n\n    return (\n      <div className=\"App\">\n        <span role='img' aria-label=\"octopus\" className=\"poulpe\">üêô</span>\n        <p>Nombre de coup restant : { countDown }</p>\n        <p className=\"displayWord\">{ display }</p>\n        <div className=\"alphabet\">\n        {LETTERS.split('').map((letter, index) => (\n            <span className=\"letters\" onClick={() => {this.handleLetterClick(index)}} key={index}>{ letter }</span>\n          ))}\n        </div>\n        <br/>\n        <Popup open={won} modal closeOnDocumentClick={false} >\n          <div className=\"modal\">\n            <p>Bien jou√© t'es poulpement fortiche toi</p>\n            <button type=\"button\" onClick={() => this.handleRetry()}>Retry  ?</button>\n          </div>\n        </Popup>\n\n        <Popup open={loss} modal closeOnDocumentClick={false} >\n          <div className=\"modal\">\n            <p>et merceeeeeeeee</p>\n            <button type=\"button\" onClick={() => this.handleRetry()}>Non d'un encrier <br />je vais r√© essayer</button>\n          </div>\n        </Popup>\n\n\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}